#!/usr/bin/perl -w
use strict;
use File::Basename;
use Getopt::Std;
my $PROGRAM = basename $0;
my $USAGE=
"Usage: $PROGRAM [WORK_DIR]
-a: show all
-v: instances not working
-h: help
";

my %OPT;
getopts('avh', \%OPT);

if ($OPT{h}) {
    die $USAGE;
}

my %PS = ();
get_ps_list();

my %TOP = ();
get_top_list();

inspect_virt_ini("/work");
inspect_virt_ini("/opt/virtuoso");
inspect_virt_ini("$ENV{HOME}/work/virtuoso");
inspect_virt_ini("$ENV{HOME}/virtuoso");

if (@ARGV) {
    my ($dir) = @ARGV;
    if (-d "$dir") {
        inspect_virt_ini("$dir");
    } else {
        die "$dir: $!";
    }
}

################################################################################
### Functions ##################################################################
################################################################################
sub inspect_virt_ini {
    my ($inspect_dir) = @_;

    if (!-d $inspect_dir) {
        return;
    }
    print "[$inspect_dir/]\n";
    chdir($inspect_dir);

    my @virt_ini_list = `ls */virtuoso.ini 2>/dev/null`;
    chomp(@virt_ini_list);
    if (-e "./virtuoso.ini") {
        push(@virt_ini_list, "./virtuoso.ini");
    }
    if (my @list = `ls */var/lib/virtuoso/db/virtuoso.ini 2>/dev/null`) {
        chomp(@list);
        push(@virt_ini_list, @list);
    }

    for my $virt_ini (@virt_ini_list) {
        if ($virt_ini =~ /^(\S+)\/\S+$/) {
            my $db_dir = $1;
            my $virt_pid = get_virt_pid($db_dir) || 0;
            if ($OPT{v}) {
                if (!$PS{$virt_pid}) {
                    print_virt_info($virt_ini, $db_dir, $virt_pid);
                }
            } elsif ($OPT{a} or $PS{$virt_pid}) {
                print_virt_info($virt_ini, $db_dir, $virt_pid);
            }
        } else {
            die;
        }
    }
    print "\n";
}

sub print_virt_info {
    my ($virt_ini, $db_dir, $virt_pid) = @_;

    print "\n$db_dir/\n";
    
    my @port = `cat $virt_ini | grep '^ServerPort' | cut 3`;
    chomp(@port);
    if (@port == 0) {
    } elsif (@port == 2) {
        my ($isql_port, $http_port) = @port;
        print "  [HTTP] $http_port [ISQL] $isql_port";
        print "\n";
    } else {
        die;
    }

    if ($PS{$virt_pid} or $TOP{$virt_pid}) {
        if ($PS{$virt_pid}) {
            print "  [MEM] ", $PS{mem}{$virt_pid};
        }
        if ($TOP{$virt_pid}) {
            print "  [CPU] ", $TOP{$virt_pid}, "%";
        }
        print "\n";
    }
    if ($PS{$virt_pid}) {
        print "  [",$PS{user}{$virt_pid}, "] $virt_pid";
        print "\n";
    }
}

sub get_ps_list {

    my @ps_list = `ps.pl 2>/dev/null`;
    chomp(@ps_list);

    for my $ps_info (@ps_list) {
        if ($ps_info =~ /^ *(\d+) +(.*)/) {
            my ($pid, $rest) = ($1, $2);
            my @f = split(/\s+/, $rest);
            my ($mem, $user) = @f[1,6];

            $PS{mem}{$pid} = $mem;
            $PS{user}{$pid} = $user;
            $PS{$pid} = $ps_info;
        }
    }
}

sub get_top_list {

    my @top_list = `top -b -n1`;
    chomp(@top_list);

    for my $top_info (@top_list) {
        if ($top_info =~ /^ *(\d+) +(.*)/) {
            my ($pid, $rest) = ($1, $2);
            my @f = split(/\s+/, $rest);
            my $cpu = $f[7];

            $TOP{$pid} = $cpu;
        }
    }
}

sub get_virt_pid {
    my ($dir) = @_;

    if (-f "$dir/virtuoso.lck") {
        my $virt_pid = `cat $dir/virtuoso.lck`;
        chomp($virt_pid);
        if ($virt_pid =~ /^VIRT_PID=(\d+)$/) {
            return $1;
        } else {
            die;
        }
    }
}
