#!/usr/bin/perl -w
use strict;
use File::Basename;
use Getopt::Std;
my $PROGRAM = basename $0;
my $USAGE=
"Usage: $PROGRAM [WORK_DIR]
-a: show all
-h: help
";

my %OPT;
getopts('ah', \%OPT);

if ($OPT{h}) {
    die $USAGE;
}

my %DB_NAME;
my %BASE_DIR;
my @BASE_DIR;
my %CHECKED_DB;
read_db_names("$ENV{HOME}/.virt/db", \%DB_NAME);

my %PS = ();
get_ps_list();

my %TOP = ();
get_top_list();

my $PRINTED = 0;
my $WORKING = 0;
my $ALL = 0;
for my $dir (@BASE_DIR) {
    inspect_virt_ini($dir);
}

if (@ARGV) {
    my ($dir) = @ARGV;
    if (-d "$dir") {
        inspect_virt_ini("$dir");
    } else {
        die "$dir: $!";
    }
}

if ($PRINTED) {
    print "--\n";
}
print "$WORKING of $ALL ";
if ($WORKING >= 2) {
    print "instances";
} else {
    print "instance";
}
print " working\n";

################################################################################
### Functions ##################################################################
################################################################################
sub inspect_virt_ini {
    my ($inspect_dir) = @_;

    if (!-d $inspect_dir) {
        return;
    }
    chdir($inspect_dir);

    my @virt_ini_list = `ls */virtuoso.ini 2>/dev/null`;
    chomp(@virt_ini_list);
    if (-e "./virtuoso.ini") {
        push(@virt_ini_list, "./virtuoso.ini");
    }
    if (my @list = `ls */var/lib/virtuoso/db/virtuoso.ini 2>/dev/null`) {
        chomp(@list);
        push(@virt_ini_list, @list);
    }
    if (my @list = `ls */database/virtuoso.ini 2>/dev/null`) {
        chomp(@list);
        push(@virt_ini_list, @list);
    }

    if ($PRINTED && @virt_ini_list) {
        print "--";
    }
    for my $virt_ini (@virt_ini_list) {
        if ($virt_ini =~ /^(\S+)\/\S+$/) {
            my $db_dir = $1;
            if ($CHECKED_DB{"$inspect_dir/$db_dir/"}) {
                next;
            }
            $CHECKED_DB{"$inspect_dir/$db_dir/"} = 1;
            my $virt_pid = get_virt_pid($db_dir) || 0;
            if ($PS{$virt_pid}) {
                $WORKING++;
            }
            $ALL++;
            if ($OPT{a} or $PS{$virt_pid}) {
                print_virt_info($inspect_dir, $virt_ini, $db_dir, $virt_pid);
            }
        } else {
            die;
        }
    }
}

sub print_virt_info {
    my ($inspect_dir, $virt_ini, $db_dir, $virt_pid) = @_;

    if ($PRINTED) {
        print "\n";
    }
    print "$inspect_dir/$db_dir/";
    if ($DB_NAME{"$inspect_dir/$db_dir"}) {
        print " => ", $DB_NAME{"$inspect_dir/$db_dir"};
    }
    if ($PS{$virt_pid}) {
        print " (*)";
    }
    print "\n";
    
    my @port = `cat $virt_ini | grep '^ServerPort' | cut 3`;
    chomp(@port);
    if (@port == 0) {
    } elsif (@port == 2) {
        my ($isql_port, $http_port) = @port;
        print "  [HTTP] $http_port";
        print "  [ISQL] $isql_port";
        print "\n";
    } else {
        die;
    }

    if ($PS{$virt_pid} or $TOP{$virt_pid}) {
        if ($PS{$virt_pid}) {
            print "  [MEM] ", $PS{mem}{$virt_pid};
        }
        if ($TOP{$virt_pid}) {
            print "  [CPU] ", $TOP{$virt_pid}, "%";
        }
        print "\n";
    }
    if ($PS{$virt_pid}) {
        print "  [user] ", $PS{user}{$virt_pid};
        print "  [PID] $virt_pid";
        print "\n";
    }

    $PRINTED++;
}

sub get_ps_list {

    my @ps_list = `ps.pl 2>/dev/null`;
    chomp(@ps_list);

    for my $ps_info (@ps_list) {
        if ($ps_info =~ /^ *(\d+) +(.*)/) {
            my ($pid, $rest) = ($1, $2);
            my @f = split(/\s+/, $rest);
            my ($mem, $user) = @f[1,6];

            $PS{mem}{$pid} = $mem;
            $PS{user}{$pid} = $user;
            $PS{$pid} = $ps_info;
        }
    }
}

sub get_top_list {

    my @top_list = `top -b -n1`;
    chomp(@top_list);

    for my $top_info (@top_list) {
        if ($top_info =~ /^ *(\d+) +(.*)/) {
            my ($pid, $rest) = ($1, $2);
            my @f = split(/\s+/, $rest);
            my $cpu = $f[7];

            $TOP{$pid} = $cpu;
        }
    }
}

sub get_virt_pid {
    my ($dir) = @_;

    if (-f "$dir/virtuoso.lck") {
        my $virt_pid = `cat $dir/virtuoso.lck`;
        chomp($virt_pid);
        if ($virt_pid =~ /^VIRT_PID=(\d+)$/) {
            return $1;
        } else {
            die;
        }
    }
}

sub read_db_names {
    my ($file, $r_hash) = @_;

    if (! -f $file) {
	return;
    }

    open(FILE, "$file") || die;
    while (<FILE>) {
	chomp;
	if (/^\s*$/) {
	    next;
	}
	if (/^\s*#/) {
	    next;
	}
	my ($db_name, $db_dir) = split;
	${$r_hash}{$db_dir} = $db_name;
        if ($db_dir =~ /(.*)\//) {
            my ($dir) = $1;
            if (!$BASE_DIR{$dir}) {
                $BASE_DIR{$dir} = 1;
                push(@BASE_DIR, $dir);
            }
        }
    }
    close(FILE);

    return;
}
